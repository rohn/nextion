{"version":3,"sources":["../src/nextion.js"],"names":["debug","applyDefaults","_","defaults","enhanced","Nextion","EventEmitter","constructor","uart","opts","connectListener","noop","ReferenceError","isFunction","on","result","name","emit","data","bind","then","catch","err","system","System","setValue","value","setComponentValue","setVariableValue","getValue","close","unbind","prototype"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;AAGA,MAAMA,QAAQ,qBAAO,iBAAP,CAAd;;AAEA;;;;;;;AAOA,MAAMC,gBAAgBC,aAAEC,QAAF,CAAW;AAC/B;AACAC,YAAU;AAFqB,CAAX,CAAtB;;AAKA;;;;AAIO,MAAMC,OAAN,SAAsBC,oBAAtB,CAAmC;AACxC;;;;;;;;;AASAC,cAAaC,IAAb,EAAmBC,OAAO,EAA1B,EAA8BC,kBAAkBR,aAAES,IAAlD,EAAwD;AACtD,QAAI,CAACH,IAAL,EAAW;AACT,YAAM,IAAII,cAAJ,CACJ,qFADI,CAAN;AAED;;AAED;;AAEA,QAAIV,aAAEW,UAAF,CAAaJ,IAAb,CAAJ,EAAwB;AACtBC,wBAAkBD,IAAlB;AACAA,aAAO,EAAP;AACD;;AAED,SAAKK,EAAL,CAAQ,WAAR,EAAqB,MAAM;AACzBd,YAAM,gBAAN;AACAU;AACD,KAHD;;AAKA;;;;;AAKA,SAAKD,IAAL,GAAYR,cAAcQ,IAAd,CAAZ;;AAEA;;;;;AAKA,SAAKD,IAAL,GAAYA,IAAZ;;AAEA;AACAA,SAAKM,EAAL,CAAQ,OAAR,EAAiBC,UAAU;AACzBf,YAAO,mBAAkBe,OAAOC,IAAK,GAArC;AACA,WAAKC,IAAL,CAAUF,OAAOC,IAAjB,EAAuBD,OAAOG,IAA9B;AACD,KAHD,EAIGJ,EAJH,CAIM,cAJN,EAIsB,MAAM;AACxBd,YAAM,uBAAN;AACD,KANH,EAOGmB,IAPH,GAQGC,IARH,CAQQ,MAAM;AACV,WAAKH,IAAL,CAAU,WAAV;AACD,KAVH,EAWGI,KAXH,CAWSC,OAAO;AACZ,WAAKL,IAAL,CAAU,OAAV,EAAmBK,GAAnB;AACD,KAbH;;AAeA;;;;AAIA,SAAKC,MAAL,GAAc,IAAIC,cAAJ,CAAWhB,IAAX,CAAd;;AAEAR,UAAM,cAAN;AACD;;AAED;;;;;;AAMAyB,WAAUT,IAAV,EAAgBU,KAAhB,EAAuB;AACrB,WAAO,KAAKlB,IAAL,CAAUiB,QAAV,CAAmBT,IAAnB,EAAyBU,KAAzB,CAAP;AACD;;AAED;;;;;;AAMAC,oBAAmBX,IAAnB,EAAyBU,KAAzB,EAAgC;AAC9B,WAAO,KAAKE,gBAAL,CAAuB,GAAEZ,IAAK,MAA9B,EAAqCU,KAArC,CAAP;AACD;;AAED;;;;;;AAMAG,WAAUb,IAAV,EAAgB;AACd,WAAO,KAAKR,IAAL,CAAUqB,QAAV,CAAmBb,IAAnB,CAAP;AACD;;AAED;;;;AAIAc,UAAS;AACP,WAAO,KAAKtB,IAAL,CAAUuB,MAAV,GACJX,IADI,CACC,MAAM;AACV,aAAO,IAAP;AACD,KAHI,CAAP;AAID;AA1GuC;;QAA7Bf,O,GAAAA,O;AA6GbA,QAAQ2B,SAAR,CAAkBJ,gBAAlB,GAAqCvB,QAAQ2B,SAAR,CAAkBP,QAAvD","file":"nextion.js","sourcesContent":["import {EventEmitter} from 'events';\nimport {System} from './system';\nimport debug_ from 'debug';\nimport _ from 'lodash/fp';\n\n/**\n * @ignore\n */\nconst debug = debug_('nextion:Nextion');\n\n/**\n * Applies defaults to an object\n * @param {NextionOptions} obj - Defaults are applied to this object\n * @returns {NextionOptions} Options w/ defaults applied\n * @function\n * @private\n */\nconst applyDefaults = _.defaults({\n  // XXX: does nothing yet\n  enhanced: true\n});\n\n/**\n * High-level abstraction for interacting with a Nextion device.\n * @extends {EventEmitter}\n */\nexport class Nextion extends EventEmitter {\n  /**\n   * Begins listening for data via a {@link UART} instance.\n   * @param {UART} uart - {@link UART} instance\n   * @param {Object|Function} [opts] - Options or `connectListener`\n   * @param {Function} [connectListener] - Callback to run when listening for\n   *   Nextion data\n   * @emits {error} When binding via `uart` fails\n   * @throws {ReferenceError} When `uart` is missing\n   */\n  constructor (uart, opts = {}, connectListener = _.noop) {\n    if (!uart) {\n      throw new ReferenceError(\n        'Invalid parameters; Use Nextion.from(), Nextion.fromSerial(), or Nextion.fromPort()');\n    }\n\n    super();\n\n    if (_.isFunction(opts)) {\n      connectListener = opts;\n      opts = {};\n    }\n\n    this.on('connected', () => {\n      debug('Nextion ready!');\n      connectListener();\n    });\n\n    /**\n     * Options\n     * @type {Object}\n     * @private\n     */\n    this.opts = applyDefaults(opts);\n\n    /**\n     * Internal UART instance\n     * @type {UART}\n     * @private\n     */\n    this.uart = uart;\n\n    // when a Nextion event occurs, re-emit it with event name\n    uart.on('event', result => {\n      debug(`Emitting event \"${result.name}\"`);\n      this.emit(result.name, result.data);\n    })\n      .on('disconnected', () => {\n        debug('Nextion disconnected!');\n      })\n      .bind()\n      .then(() => {\n        this.emit('connected');\n      })\n      .catch(err => {\n        this.emit('error', err);\n      });\n\n    /**\n     * System-level Nextion commands\n     * @type {System}\n     */\n    this.system = new System(uart);\n\n    debug('Instantiated');\n  }\n\n  /**\n   * Sets a local or global variable on the current page to a value\n   * @param {string} name - Name of variable\n   * @param {*} [value] - New variable value\n   * @returns {Promise<ResponseResult<*>,Error>} Result\n   */\n  setValue (name, value) {\n    return this.uart.setValue(name, value);\n  }\n\n  /**\n   * Sets a the value of a local component\n   * @param {string} name - Name of component\n   * @param {*} [value] - New component value\n   * @returns {Promise<ResponseResult<*>,Error>} Result\n   */\n  setComponentValue (name, value) {\n    return this.setVariableValue(`${name}.val`, value);\n  }\n\n  /**\n   * Get a value\n   * @param {string} name - Name; can be `varName.val` or `component.txt`, etc.\n   * @returns {Promise<ResponseResult<StringData|NumericData>,Error>} String or\n   *   numeric data response (depending on variable's type)\n   */\n  getValue (name) {\n    return this.uart.getValue(name);\n  }\n\n  /**\n   * Closes connection to Nextion device.\n   * @returns {Promise<Nextion>} This instance\n   */\n  close () {\n    return this.uart.unbind()\n      .then(() => {\n        return this;\n      });\n  }\n}\n\nNextion.prototype.setVariableValue = Nextion.prototype.setValue;\n"]}