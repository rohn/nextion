{"version":3,"sources":["../src/index.js"],"names":["instantiate","uart","opts","Promise","resolve","nextion","Nextion","from","port","UART","then","create","fromSerial","serialPort","fromPort","portName","NextionProtocol","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;;AAQA;;;;;;;;AAQA,SAASA,WAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,SAAO,IAAIC,OAAJ,CAAYC,WAAW;AAC5B,UAAMC,UAAU,IAAIC,gBAAJ,CAAYL,IAAZ,EAAkBC,IAAlB,EAAwB,MAAM;AAC5CE,cAAQC,OAAR;AACD,KAFe,CAAhB;AAGD,GAJM,CAAP;AAKD;;AAED;;;;;;AAMAC,iBAAQC,IAAR,GAAe,CAACC,IAAD,EAAON,IAAP,KAAgBO,WAAKF,IAAL,CAAUC,IAAV,EAAgBN,IAAhB,EAC5BQ,IAD4B,CACvBV,WADuB,CAA/B;AAEAM,iBAAQK,MAAR,GAAiBL,iBAAQC,IAAzB;;AAEA;;;;;;AAMAD,iBAAQM,UAAR,GAAqB,CAACC,UAAD,EAAaX,IAAb,KAAsBO,WAAKG,UAAL,CAAgBC,UAAhB,EAA4BX,IAA5B,EACxCQ,IADwC,CACnCV,WADmC,CAA3C;;AAGA;;;;;;AAMAM,iBAAQQ,QAAR,GAAmB,CAACC,QAAD,EAAWb,IAAX,KAAoBO,WAAKK,QAAL,CAAcC,QAAd,EAAwBb,IAAxB,EACpCQ,IADoC,CAC/BV,WAD+B,CAAvC;;AAGAM,iBAAQU,eAAR,GAA0BA,yBAA1B;AACAV,iBAAQG,IAAR,GAAeA,UAAf;;AAEAQ,OAAOC,OAAP,GAAiBZ,gBAAjB","file":"index.js","sourcesContent":["import {Nextion} from './nextion';\nimport {NextionProtocol} from './protocol';\nimport {UART} from './uart';\n\n/**\n * @external {EventEmitter} https://nodejs.org/api/events.html#events_class_eventemitter\n */\n\n/**\n * @external {Duplex} https://nodejs.org/api/stream.html#stream_class_stream_duplex\n */\n\n/**\n * @external {Serialport} https://npmjs.com/package/serialport\n */\n\n/**\n * @external {Buffer} https://nodejs.org/api/buffer.html#buffer_class_buffer\n */\n\n/**\n * Valid options to supply a {@link Nextion} or {@link UART} constructor.\n * All options are optional.\n * @typedef {Object} NextionOptions\n * @property {string} [port] - Name (e.g. \"COM3\") or path (e.g. \"/dev/ttyUSB0\")\n * @property {number} [baudRate=9600] - Baud rate of Nextion device.\n */\n\n/**\n * Instantiates a Nextion instance and fulfills a Promise\n * when it's listening for data.\n * @param {UART} uart - UART instance\n * @param {NextionOptions} [opts] - Extra options\n * @private\n * @returns {Promise<Nextion>} New Nextion instance\n */\nfunction instantiate (uart, opts) {\n  return new Promise(resolve => {\n    const nextion = new Nextion(uart, opts, () => {\n      resolve(nextion);\n    });\n  });\n}\n\n/**\n * Create a Nextion instance.\n * @param {string|Object} [port] - Name of port (`COM1`, `/dev/tty.usbserial`, etc.), `Serialport` instance or `Duplex` stream.  Omit for autodetection.\n * @param {NextionOptions} [opts] - Options\n * @returns {Promise<Nextion>} - Nextion instance\n */\nNextion.from = (port, opts) => UART.from(port, opts)\n  .then(instantiate);\nNextion.create = Nextion.from;\n\n/**\n * Create a Nextion instance using an existing connected `Serialport` instance or `Duplex` stream.\n * @param {string} serialPort - `Serialport` instance, `Duplex` stream, etc.\n * @param {NextionOptions} [opts] - Options\n * @returns {Promise<Nextion>} - Nextion instance\n */\nNextion.fromSerial = (serialPort, opts) => UART.fromSerial(serialPort, opts)\n  .then(instantiate);\n\n/**\n * Create a Nextion instance, optionally specifying a port name.\n * @param {string} [portName] - Name of port (`COM1`, `/dev/tty.usbserial`, etc.).  Omit for autodetection.\n * @param {NextionOptions} [opts] - Options\n * @returns {Promise<Nextion>} - Nextion instance\n */\nNextion.fromPort = (portName, opts) => UART.fromPort(portName, opts)\n  .then(instantiate);\n\nNextion.NextionProtocol = NextionProtocol;\nNextion.UART = UART;\n\nmodule.exports = Nextion;\n"]}