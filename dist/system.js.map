{"version":3,"sources":["../src/system.js"],"names":["SYSTEM_VARIABLES","System","EventEmitter","constructor","uart","setSystemVariable","name","value","Promise","resolve","then","_","includes","TypeError","join","MAX_INT","setValue","setRandomRange","min","max","request","random","setNoTouchSleepTimer","ms","Math","floor","sleep","shouldSleep","wake"],"mappings":";;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;;AAKO,MAAMA,8CAAmB,CAC9B,MAD8B,EAE9B,MAF8B,EAG9B,MAH8B,CAAzB;;AAMP;;;;AAIO,MAAMC,MAAN,SAAqBC,oBAArB,CAAkC;AACvC;;;;AAIAC,cAAaC,IAAb,EAAmB;AACjB;;AAEA,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAED;;;;;;;;;AASAC,oBAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,WAAOC,QAAQC,OAAR,GACJC,IADI,CACC,MAAM;AACV,UAAI,CAACC,aAAEC,QAAF,CAAWN,IAAX,EAAiBN,gBAAjB,CAAL,EAAyC;AACvC,cAAM,IAAIa,SAAJ,CAAe,0BAAyBb,iBAAiBc,IAAjB,CAC5C,IAD4C,CACtC,gBAAeR,IAAK,GADtB,CAAN;AAED;AACD,UAAI,CAAC,6BAAkBC,KAAlB,CAAL,EAA+B;AAC7B,cAAM,IAAIM,SAAJ,CACH,0CAAyCE,aAAQ,SAAQR,KAAM,EAD5D,CAAN;AAED;AACD,aAAO,KAAKH,IAAL,CAAUY,QAAV,CAAmBV,IAAnB,EAAyBC,KAAzB,CAAP;AACD,KAXI,CAAP;AAYD;;AAED;;;;;;;AAOAU,iBAAgBC,MAAM,CAAtB,EAAyBC,MAAM,CAA/B,EAAkC;AAChC,WAAOX,QAAQC,OAAR,GACJC,IADI,CACC,MAAM;AACV,UAAI,CAAC,6BAAkBQ,GAAlB,CAAL,EAA6B;AAC3B,cAAM,IAAIL,SAAJ,CACH,wCAAuCE,aAAQ,EAD5C,CAAN;AAED;AACD,UAAI,CAAC,6BAAkBI,GAAlB,CAAL,EAA6B;AAC3B,cAAM,IAAIN,SAAJ,CACH,wCAAuCE,aAAQ,EAD5C,CAAN;AAED;AACD,UAAIG,MAAMC,GAAV,EAAe;AACb,cAAM,IAAIN,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,aAAO,KAAKT,IAAL,CAAUgB,OAAV,CAAmB,UAASF,GAAI,IAAGC,GAAI,EAAvC,CAAP;AACD,KAfI,CAAP;AAgBD;;AAED;;;;;;;;AAQAE,SAAQH,MAAM,CAAd,EAAiBC,MAAM,CAAvB,EAA0B;AACxB,WAAOX,QAAQC,OAAR,CAAgB,MAAM;AAC3B,UAAIS,OAAOC,GAAX,EAAgB;AACd,eAAO,KAAKF,cAAL,CAAoBC,GAApB,EAAyBC,GAAzB,CAAP;AACD;AACF,KAJM,EAKJT,IALI,CAKC,MAAM,KAAKN,IAAL,CAAUgB,OAAV,CAAkB,MAAlB,CALP,CAAP;AAMD;;AAED;;;;;;AAMAE,uBAAsBC,KAAK,CAA3B,EAA8B;AAC5B,WAAO,KAAKnB,IAAL,CAAUY,QAAV,CAAmB,MAAnB,EAA2BQ,KAAKC,KAAL,CAAWF,KAAK,IAAhB,CAA3B,CAAP;AACD;;AAED;;;;;;AAMAG,QAAOC,cAAc,IAArB,EAA2B;AACzB,WAAO,KAAKvB,IAAL,CAAUY,QAAV,CAAmB,OAAnB,EAA4BW,WAA5B,CAAP;AACD;;AAED;;;;;AAKAC,SAAQ;AACN,WAAO,KAAKF,KAAL,CAAW,KAAX,CAAP;AACD;AAzGsC;QAA5BzB,M,GAAAA,M","file":"system.js","sourcesContent":["import _ from 'lodash/fp';\nimport {EventEmitter} from 'events';\nimport {isUnsignedInteger, MAX_INT} from './util';\n\n/**\n * These are the names of the internal system variables.\n * @type {string[]}\n * @private\n */\nexport const SYSTEM_VARIABLES = [\n  'sys0',\n  'sys1',\n  'sys2'\n];\n\n/**\n * System-level Nextion device functionality.\n * @extends {EventEmitter}\n */\nexport class System extends EventEmitter {\n  /**\n   * Creates a {@link System} instance.\n   * @param {UART} uart - UART instance.\n   */\n  constructor (uart) {\n    super();\n\n    this.uart = uart;\n  }\n\n  /**\n   * Sets value of system variable.\n   * @param {string} name - Name of system variable; either `sys0`, `sys1`, or\n   *   `sys2`.\n   * @param {number} value - Must be an unsigned integer less than or equal to\n   *   `4294967295`.\n   * @returns {Promise<ResponseResult,TypeError>} Response or {@link TypeError}\n   *   if invalid `name` or `value`\n   */\n  setSystemVariable (name, value) {\n    return Promise.resolve()\n      .then(() => {\n        if (!_.includes(name, SYSTEM_VARIABLES)) {\n          throw new TypeError(`\"name\" must be one of: ${SYSTEM_VARIABLES.join(\n            ', ')}, but found \"${name}\"`);\n        }\n        if (!isUnsignedInteger(value)) {\n          throw new TypeError(\n            `\"value\" must be an unsigned integer <= ${MAX_INT}; got ${value}`);\n        }\n        return this.uart.setValue(name, value);\n      });\n  }\n\n  /**\n   * Sets the range of results returned by {@link System#random}.\n   * @param {number} [min=0] - Unsigned integer; no greater than `max`\n   * @param {number} [max=4294967295] - Unsigned integer; no less than `min`\n   * @returns {Promise.<ResponseResult,TypeError>} Response or {@link\n    *   TypeError} if invalid `min` or `max` value\n   */\n  setRandomRange (min = 0, max = 1) {\n    return Promise.resolve()\n      .then(() => {\n        if (!isUnsignedInteger(min)) {\n          throw new TypeError(\n            `\"min\" must be an unsigned integer <= ${MAX_INT}`);\n        }\n        if (!isUnsignedInteger(max)) {\n          throw new TypeError(\n            `\"max\" must be an unsigned integer <= ${MAX_INT}`);\n        }\n        if (min > max) {\n          throw new TypeError('\"min\" cannot be greater than \"max\"');\n        }\n\n        return this.uart.request(`ranset ${min},${max}`);\n      });\n  }\n\n  /**\n   * Gets a random value, optionally setting the allowed range via {@link\n    * System#setRandomRange}.\n   * @param {number} [min=0] - Unsigned integer; no greater than `max`\n   * @param {number} [max=0] - Unsigned integer; no less than `min`\n   * @returns {Promise<ResponseResult,TypeError>} Result or error if invalid\n   *   range supplied\n   */\n  random (min = 0, max = 0) {\n    return Promise.resolve(() => {\n      if (min || max) {\n        return this.setRandomRange(min, max);\n      }\n    })\n      .then(() => this.uart.request('rand'));\n  }\n\n  /**\n   * Set sleep timer when not touched.\n   * @param {number} ms - Sleep after `ms` milliseconds of no touching. Rounded\n   *   to closest second.\n   * @returns {Promise.<ResponseResult, Error>} Result\n   */\n  setNoTouchSleepTimer (ms = 0) {\n    return this.uart.setValue('thsp', Math.floor(ms / 1000));\n  }\n\n  /**\n   * Puts Nextion to sleep.\n   * @see {@link System#wake}\n   * @param {boolean} [shouldSleep=true] Sleep if `true`; wake if `false`.\n   * @returns {Promise.<ResponseResult, Error>} Result\n   */\n  sleep (shouldSleep = true) {\n    return this.uart.setValue('sleep', shouldSleep);\n  }\n\n  /**\n   * Wakes Nextion from sleep.\n   * @see {@link System#sleep}\n   * @returns {Promise.<ResponseResult, Error>} Result\n   */\n  wake () {\n    return this.sleep(false);\n  }\n}\n"]}